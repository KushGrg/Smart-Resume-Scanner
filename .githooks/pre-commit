#!/bin/bash

# Laravel Smart Resume Scanner - Pre-commit Hook
# This hook runs code quality checks before allowing commits

echo "üîç Running pre-commit code quality checks..."

# Exit on any error
set -e

# Get list of staged PHP files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(php)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "‚úÖ No PHP files to check"
    exit 0
fi

echo "üìÅ Checking files: $STAGED_FILES"

# Run PHP syntax check
echo "üîß Running PHP syntax check..."
for FILE in $STAGED_FILES; do
    if [ -f "$FILE" ]; then
        php -l "$FILE"
        if [ $? -ne 0 ]; then
            echo "‚ùå PHP syntax error in $FILE"
            exit 1
        fi
    fi
done

# Run PHP_CodeSniffer (PSR-12)
if command -v phpcs &> /dev/null; then
    echo "üé® Running PHP_CodeSniffer (PSR-12)..."
    ./vendor/bin/phpcs --standard=PSR12 --extensions=php --ignore=vendor/ $STAGED_FILES
    if [ $? -ne 0 ]; then
        echo "‚ùå Code style violations found. Run 'composer phpcbf' to auto-fix."
        exit 1
    fi
fi

# Run PHPStan static analysis
if command -v phpstan &> /dev/null; then
    echo "üîç Running PHPStan static analysis..."
    ./vendor/bin/phpstan analyse --no-progress $STAGED_FILES
    if [ $? -ne 0 ]; then
        echo "‚ùå PHPStan analysis failed"
        exit 1
    fi
fi

# Run Laravel Pint (if available)
if [ -f "./vendor/bin/pint" ]; then
    echo "üé® Running Laravel Pint..."
    ./vendor/bin/pint --test $STAGED_FILES
    if [ $? -ne 0 ]; then
        echo "‚ùå Laravel Pint found style issues. Run './vendor/bin/pint' to fix."
        exit 1
    fi
fi

# Check for common Laravel issues
echo "üîç Checking for common Laravel issues..."
for FILE in $STAGED_FILES; do
    if [ -f "$FILE" ]; then
        # Check for dd() or dump() functions in production code
        if grep -q "dd(" "$FILE" || grep -q "dump(" "$FILE"; then
            echo "‚ö†Ô∏è  Warning: Found dd() or dump() in $FILE - remove before production"
        fi
        
        # Check for var_dump or print_r
        if grep -q "var_dump\|print_r" "$FILE"; then
            echo "‚ö†Ô∏è  Warning: Found var_dump/print_r in $FILE - use Log:: instead"
        fi
        
        # Check for hardcoded credentials
        if grep -qi "password.*=.*['\"][^'\"]*['\"]" "$FILE"; then
            echo "‚ö†Ô∏è  Warning: Possible hardcoded credentials in $FILE"
        fi
    fi
done

echo "‚úÖ All pre-commit checks passed!"
exit 0
